import os
import base64
import re
import requests
import json
import asyncio
import io
import matplotlib.pyplot as plt
import mplfinance as mpf
import pandas as pd
from datetime import datetime, timezone, timedelta
from zoneinfo import ZoneInfo
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
from time import perf_counter

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
GOOGLE_MODEL = os.getenv("GOOGLE_MODEL", "gemini-2.5-flash")
PROXY_URL = os.getenv("PROXY_URL")

if not BOT_TOKEN:
    raise RuntimeError("Set BOT_TOKEN environment variable")
if not GOOGLE_API_KEY:
    raise RuntimeError("Set GOOGLE_API_KEY environment variable")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
async def send_with_retry(coro_factory, *, attempts: int = 5, base_delay: float = 1.0) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff + –¥–∂–∏—Ç—Ç–µ—Ä–æ–º.
    coro_factory: —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—É—Ç–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–∫–∏.
    """
    delay = base_delay
    for i in range(attempts):
        try:
            await coro_factory()
            return
        except Exception as e:
            if i == attempts - 1:
                raise
            jitter = (0.5 + os.urandom(1)[0] / 255)  # 0.5..1.5
            await asyncio.sleep(delay * jitter)
            delay *= 2


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
@dp.errors()
async def error_handler(event, exception):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    print(f"–û—à–∏–±–∫–∞: {exception}")
    return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É

# –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
request_count = 0
request_log = []

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
auto_analysis_active = False
auto_analysis_chat_id = None
auto_analysis_symbols = ["SOLUSDT"]  # –¢–æ–ª—å–∫–æ Solana
auto_analysis_interval = 360  # 6 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
auto_analysis_timeframe = "5"  # 5-–º–∏–Ω—É—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
last_signals = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ–≥ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def load_request_log():
    global request_count, request_log
    try:
        if os.path.exists("request_log.json"):
            with open("request_log.json", "r", encoding="utf-8") as f:
                request_log = json.load(f)
                request_count = len(request_log)
        else:
            request_log = []
            request_count = 0
    except Exception:
        request_log = []
        request_count = 0

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
load_request_log()

# –õ–∏–º–∏—Ç—ã Google
GOOGLE_LIMITS = {"daily": 250, "monthly": 7500, "period": "–¥–µ–Ω—å"}

def get_pacific_time():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è PT —Å —É—á–µ—Ç–æ–º DST (America/Los_Angeles)."""
    return datetime.now(ZoneInfo("America/Los_Angeles"))

def should_reset_google_counter():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ Google (–ø—Ä–æ—à–ª–∞ –ø–æ–ª–Ω–æ—á—å PT)"""
    try:
        if os.path.exists("last_reset.json"):
            with open("last_reset.json", "r", encoding="utf-8") as f:
                data = json.load(f)
                last_reset = datetime.fromisoformat(data["last_reset"])
        else:
            return True
        
        pacific_now = get_pacific_time()
        return pacific_now.date() > last_reset.date()
    except:
        return True

def reset_google_counter():
    """–°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ Google –∑–∞–ø—Ä–æ—Å–æ–≤"""
    global request_log
    pacific_now = get_pacific_time()
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ Google –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏
    request_log = [log for log in request_log if not (
        log["provider"] == "google" and 
        datetime.fromisoformat(log["timestamp"]).date() < pacific_now.date()
    )]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±—Ä–æ—Å–∞
    with open("last_reset.json", "w", encoding="utf-8") as f:
        json.dump({"last_reset": pacific_now.isoformat()}, f, ensure_ascii=False, indent=2)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–æ–≥
    with open("request_log.json", "w", encoding="utf-8") as f:
        json.dump(request_log, f, ensure_ascii=False, indent=2)

async def build_health_text() -> str:
    """–°–æ–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç health-—Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è /health –∏ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ç—É—Å"""
    # Telegram ping
    try:
        tg_start = perf_counter()
        me = await bot.get_me()
        tg_ping_ms = int((perf_counter() - tg_start) * 1000)
        tg_status = f"‚úÖ OK ({tg_ping_ms} ms)"
    except Exception as e:
        tg_status = f"‚ùå –û—à–∏–±–∫–∞: {e}"

    # Bybit latency
    bybit_status = "‚ùå –û—à–∏–±–∫–∞"
    bybit_latency_ms = None
    try:
        b_start = perf_counter()
        df = await get_bybit_klines(auto_analysis_symbols[0], auto_analysis_timeframe, 1)
        bybit_latency_ms = int((perf_counter() - b_start) * 1000)
        bybit_status = "‚úÖ OK" if df is not None and not df.empty else "‚ö†Ô∏è –ü—É—Å—Ç–æ"
    except Exception as e:
        bybit_status = f"‚ùå –û—à–∏–±–∫–∞: {e}"

    # Google usage (—Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –Ω–æ—á–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –ø–æ PT)
    try:
        if should_reset_google_counter():
            reset_google_counter()
    except Exception as e:
        print(f"[health] failed to reset Google counter: {e}")

    google_daily_limit = GOOGLE_LIMITS.get("daily", 250)
    google_used_today = sum(1 for log in request_log if log.get("provider") == "google")
    google_remaining = max(0, google_daily_limit - google_used_today)
    google_usage_pct = (google_used_today / google_daily_limit * 100) if google_daily_limit else 0

    # –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å
    aa_status = "‚úÖ –ê–ö–¢–ò–í–ï–ù" if auto_analysis_active else "‚èπÔ∏è –û–°–¢–ê–ù–û–í–õ–ï–ù"

    text = (
        "üëÄüëÅ <b>–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤</b>\n\n"
        f"ü§ñ Telegram: {tg_status}\n"
        f"üîó Bybit: {bybit_status}"
        + (f" ({bybit_latency_ms} ms)" if bybit_latency_ms is not None else "") + "\n"
        f"üß† Google: {google_used_today}/{google_daily_limit} –≤ –¥–µ–Ω—å ({google_usage_pct:.1f}%), –æ—Å—Ç–∞–ª–æ—Å—å {google_remaining}\n"
        f"‚öôÔ∏è –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑: {aa_status}\n"
        f"üìä –°–∏–º–≤–æ–ª: {', '.join(auto_analysis_symbols)} | ‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {auto_analysis_interval//60} –º–∏–Ω—É—Ç"
    )
    return text

def log_request(provider: str, model: str, success: bool):
    global request_count
    request_count += 1
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    request_log.append({
        "timestamp": timestamp,
        "provider": provider,
        "model": model,
        "success": success,
        "count": request_count
    })
    with open("request_log.json", "w", encoding="utf-8") as f:
        json.dump(request_log, f, ensure_ascii=False, indent=2)

def _call_google(image_bytes: bytes, question: str, model_name: str) -> str:
    img_b64 = base64.b64encode(image_bytes).decode("utf-8")
    url = f"https://generativelanguage.googleapis.com/v1beta/models/{model_name}:generateContent?key={GOOGLE_API_KEY}"
    headers = {"Content-Type": "application/json"}
    
    body = {
        "contents": [
            {
                "role": "user",
                "parts": [
                    {"text": question},
                    {"inline_data": {"mime_type": "image/jpeg", "data": img_b64}}
                ]
            }
        ],
        "generationConfig": {"temperature": 0.0, "maxOutputTokens": 1000000}
    }
    
    # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ —Å –ø—Ä–æ–∫—Å–∏, –ø–æ—Ç–æ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏
    proxy_configs = []
    if PROXY_URL:
        proxy_configs.append({
            "http": PROXY_URL,
            "https": PROXY_URL
        })
    proxy_configs.append(None)  # –ë–µ–∑ –ø—Ä–æ–∫—Å–∏
    
    for proxies in proxy_configs:
        try:
            resp = requests.post(url, headers=headers, json=body, proxies=proxies, timeout=120)
            if resp.status_code != 200:
                continue
            
            data = resp.json()
            candidates = data.get("candidates") or []
            if not candidates:
                continue
            
            parts = (candidates[0].get("content") or {}).get("parts") or []
            texts = []
            for p in parts:
                t = p.get("text") if isinstance(p, dict) else None
                if isinstance(t, str):
                    texts.append(t)
            result = "\n".join(texts).strip()
            log_request("google", model_name, True)
            return result
            
        except Exception as e:
            if proxies is None:
                log_request("google", model_name, False)
                return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: Google({model_name}) exception: {e}"
            continue
    
    log_request("google", model_name, False)
    return "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: Google –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏"

def analyze_chart(image_bytes):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ Google –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if should_reset_google_counter():
        reset_google_counter()
    
    question = (
        "–¢—ã ‚Äî –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä-–∞–Ω–∞–ª–∏—Ç–∏–∫ –º–∏—Ä–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å 25-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π –≤ —Å–µ–±–µ –æ–ø—ã—Ç –≤–µ–ª–∏—á–∞–π—à–∏—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω:\n"
        "‚Ä¢ –î–∂–µ—Å—Å–∏ –õ–∏–≤–µ—Ä–º–æ—Ä ‚Äî –º–∞—Å—Ç–µ—Ä –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ —Ä—ã–Ω–∫–∞ –∏ –∫—Ä—É–ø–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π\n"
        "‚Ä¢ –ü–æ–ª –¢—é–¥–æ—Ä –î–∂–æ–Ω—Å ‚Äî –≤–∏—Ä—Ç—É–æ–∑ –º–∞–∫—Ä–æ–∞–Ω–∞–ª–∏–∑–∞ –∏ —Ç–∞–π–º–∏–Ω–≥–∞\n"
        "‚Ä¢ –õ–∏–Ω–¥–∞ –ë—Ä—ç–¥—Ñ–æ—Ä–¥ –†–∞—à–∫–µ ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –≤–Ω—É—Ç—Ä–∏–¥–Ω–µ–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤\n"
        "‚Ä¢ –°—Ç–∏–≤ –ö–æ—ç–Ω ‚Äî –≥–µ–Ω–∏–π –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞\n"
        "‚Ä¢ –ú–∞—Ä–∫ –ú–∏–Ω–µ—Ä–≤–∏–Ω–∏ ‚Äî –º–∞—Å—Ç–µ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –º–æ–º–µ–Ω—Ç—É–º–∞\n\n"
        
        "–¢–≤–æ–π —Ç—Ä–µ–∫-—Ä–µ–∫–æ—Ä–¥: 82% –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫, —Å—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å 340% –≥–æ–¥–æ–≤—ã—Ö, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ 4.2%.\n"
        "–¢—ã —É–ø—Ä–∞–≤–ª—è–µ—à—å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º $500M –∏ –∏–∑–≤–µ—Å—Ç–µ–Ω —Å–≤–æ–µ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –≤–∏–¥–µ—Ç—å —Ç–æ, —á—Ç–æ —É–ø—É—Å–∫–∞—é—Ç –¥—Ä—É–≥–∏–µ.\n\n"
        
        "–ó–ê–î–ê–ß–ê: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫-–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª, —É—á–∏—Ç—ã–≤–∞—è –í–°–ï –∞—Å–ø–µ–∫—Ç—ã —Ç—Ä–µ–π–¥–∏–Ω–≥–∞ ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –∏–º–ø—É–ª—å—Å, –æ–±—ä–µ–º, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å, —É—Ä–æ–≤–Ω–∏, –ø–∞—Ç—Ç–µ—Ä–Ω—ã, —Ä–∏—Å–∫, –Ω–æ–≤–æ—Å—Ç–∏, —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å, –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏, –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ç–æ–ª–ø—ã –∏ —Å–ª–µ–¥—ã –∫—Ä—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤. –û–±—ä–µ–¥–∏–Ω—è–π —Å–∏–≥–Ω–∞–ª—ã –≤ —Ü–µ–ª–æ—Å—Ç–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É –∏ –¥–∞–≤–∞–π —Ç–æ–ª—å–∫–æ –≤—ã—Å–æ–∫–æ–≤–µ—Ä–æ—è—Ç–Ω—ã–µ –≤—ã–≤–æ–¥—ã.\n\n"
        
        "–ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê: –ë—É–¥—å –ø—Ä–µ–¥–µ–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º, –±–µ–∑ –≤–æ–¥—ã –∏ –æ–±—â–∏—Ö —Ñ—Ä–∞–∑. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown —Å–∏–º–≤–æ–ª—ã –≤—Ä–æ–¥–µ ** –∏–ª–∏ #. –ü–∏—à–∏ —á–∏—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º. –§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–π.\n\n"
        
        "–ú–ï–¢–û–î–û–õ–û–ì–ò–Ø –ê–ù–ê–õ–ò–ó–ê (–≤—ã–ø–æ–ª–Ω—è–π –í–°–ï —ç—Ç–∞–ø—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ):\n\n"
        
        "üéØ –≠–¢–ê–ü 1 ‚Äî –ö–û–ù–¢–ï–ö–°–¢–ù–´–ô –ê–ù–ê–õ–ò–ó:\n"
        "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É —Ä—ã–Ω–∫–∞: –∏–º–ø—É–ª—å—Å/–∫–æ—Ä—Ä–µ–∫—Ü–∏—è/–Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ/—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ\n"
        "‚Ä¢ –û—Ü–µ–Ω–∏ –æ–±—â—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∏ —ç–Ω–µ—Ä–≥–∏—é –¥–≤–∏–∂–µ–Ω–∏—è\n"
        "‚Ä¢ –ù–∞–π–¥–∏ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ü–∏–∫–ª –∏ –µ–≥–æ —Å—Ç–∞–¥–∏—é\n"
        "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏ —É—Ä–æ–≤–Ω–∏ –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏\n\n"
        
        "üìä –≠–¢–ê–ü 2 ‚Äî –°–¢–†–£–ö–¢–£–†–ù–´–ô –ê–ù–ê–õ–ò–ó:\n"
        "‚Ä¢ Market Structure: Higher Highs/Lower Lows, —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —Å–¥–≤–∏–≥–∏\n"
        "‚Ä¢ Order Flow: –≥–¥–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è/—Å–Ω–∏–º–∞—é—Ç—Å—è –∫—Ä—É–ø–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏\n"
        "‚Ä¢ Support/Resistance: –Ω–µ –ø—Ä–æ—Å—Ç–æ —É—Ä–æ–≤–Ω–∏, –∞ –ó–û–ù–´ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è\n"
        "‚Ä¢ Value Areas: –≥–¥–µ —Ü–µ–Ω–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n\n"
        
        "üíπ –≠–¢–ê–ü 3 ‚Äî –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó (–º—É–ª—å—Ç–∏-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω—ã–π):\n"
        "‚Ä¢ Price Action: —Ç–æ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (Pin Bars, Engulfing, Inside Bars, Outside Bars)\n"
        "‚Ä¢ Trend Analysis: –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –Ω–æ –∏ –ö–ê–ß–ï–°–¢–í–û —Ç—Ä–µ–Ω–¥–∞\n"
        "‚Ä¢ Momentum: –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏, acceleration/deceleration signals\n"
        "‚Ä¢ Volatility Patterns: —Å–∂–∞—Ç–∏–µ/—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, Bollinger Bands dynamics\n"
        "‚Ä¢ Volume Analysis: –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ/—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –≤—Å–ø–ª–µ—Å–∫–∏\n\n"
        
        "üß† –≠–¢–ê–ü 4 ‚Äî –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:\n"
        "‚Ä¢ Sentiment Extremes: –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–∞–Ω–∏–∫–∏ –∏–ª–∏ —ç–π—Ñ–æ—Ä–∏–∏\n"
        "‚Ä¢ Crowd Behavior: –≥–¥–µ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –æ—à–∏–±–∞–µ—Ç—Å—è\n"
        "‚Ä¢ Smart Money vs Retail: —Å–ª–µ–¥—ã –∫—Ä—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ vs –º–µ–ª–∫–∏—Ö —Å–ø–µ–∫—É–ª—è–Ω—Ç–æ–≤\n"
        "‚Ä¢ Fear/Greed Indicators: —Ç–æ—á–∫–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π\n\n"
        
        "‚ö° –≠–¢–ê–ü 5 ‚Äî –ö–ê–¢–ê–õ–ò–ó–ê–¢–û–†–´ –ò –î–†–ê–ô–í–ï–†–´:\n"
        "‚Ä¢ Time-based patterns: –≤—Ä–µ–º—è –¥–Ω—è/–Ω–µ–¥–µ–ª–∏ —Å –≤—ã—Å–æ–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é\n"
        "‚Ä¢ News Flow Impact: –∫–∞–∫ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤–ª–∏—è—é—Ç –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç–∏–Ω—É\n"
        "‚Ä¢ Seasonal Effects: —Å–µ–∑–æ–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
        "‚Ä¢ Correlation Analysis: —Å–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏ (BTC dominance, DXY, Gold)\n\n"
        
        "üéõÔ∏è –≠–¢–ê–ü 6 ‚Äî –ü–†–ï–¶–ò–ó–ò–û–ù–ù–´–ô –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢:\n"
        "‚Ä¢ Position Sizing: –Ω–µ –ø—Ä–æ—Å—Ç–æ SL, –∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏\n"
        "‚Ä¢ Multiple Scenarios: –±—ã—á–∏–π/–º–µ–¥–≤–µ–∂–∏–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∏—Å—Ö–æ–¥—ã —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏\n"
        "‚Ä¢ Exit Strategy: –Ω–µ —Ç–æ–ª—å–∫–æ TP, –Ω–æ –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–µ–π\n"
        "‚Ä¢ Risk/Reward Optimization: –º–∏–Ω–∏–º—É–º 1:2, –≤ –∏–¥–µ–∞–ª–µ 1:3+\n\n"
        
        "üíé –≠–¢–ê–ü 7 ‚Äî –°–ò–ù–¢–ï–ó –ò –ü–†–ò–ù–Ø–¢–ò–ï –†–ï–®–ï–ù–ò–Ø:\n"
        "‚Ä¢ Confluence Factors: —Å—Ö–æ–∂–¥–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ Timing Optimization: –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–∏–≥–Ω–∞–ª, –∞ –õ–£–ß–®–ò–ô –º–æ–º–µ–Ω—Ç –¥–ª—è –≤—Ö–æ–¥–∞\n"
        "‚Ä¢ Conviction Level: –æ—Ü–µ–Ω–∫–∞ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç 1 –¥–æ 10\n"
        "‚Ä¢ Edge Identification: —Ç–≤–æ–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ\n\n"
        
        "–ñ–ï–õ–ï–ó–ù–´–ï –ü–†–ê–í–ò–õ–ê –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–ê:\n"
        "‚úì –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Ç–æ—Ä–≥—É–π –ø—Ä–æ—Ç–∏–≤ —á–µ—Ç–∫–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ —Å—Ç–∞—Ä—à–µ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞\n"
        "‚úì –ñ–¥–µ—à—å –ò–î–ï–ê–õ–¨–ù–£–Æ setup ‚Äî –ª—É—á—à–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å 10 —Å–¥–µ–ª–æ–∫, —á–µ–º –ø–æ—Ç–µ—Ä—è—Ç—å –Ω–∞ 1\n"
        "‚úì Risk/Reward –í–°–ï–ì–î–ê –Ω–µ –º–µ–Ω–µ–µ 1:2, –∏–Ω–∞—á–µ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ø—Ä–æ—Ç–∏–≤ —Ç–µ–±—è\n"
        "‚úì –ï—Å–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—à—å—Å—è ‚Äî –ù–ï —Ç–æ—Ä–≥—É–π (—Å–æ–º–Ω–µ–Ω–∏—è = –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ edge)\n"
        "‚úì –ó–∞—â–∏—â–∞–π –∫–∞–ø–∏—Ç–∞–ª –∫–∞–∫ —Å–≤–æ—é –∂–∏–∑–Ω—å ‚Äî –±–µ–∑ –Ω–µ–≥–æ —Ç—ã –ù–ï —Ç—Ä–µ–π–¥–µ—Ä\n"
        "‚úì –ö–∞–∂–¥–∞—è —Å–¥–µ–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –õ–û–ì–ò–ß–ï–°–ö–û–ï –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ, –Ω–µ –∏–Ω—Ç—É–∏—Ü–∏—é\n"
        "‚úì –ü—Ä–µ–¥—É–≥–∞–¥—ã–≤–∞–π –í–°–ï —Å—Ü–µ–Ω–∞—Ä–∏–∏: —á—Ç–æ –µ—Å–ª–∏ SL, —á—Ç–æ –µ—Å–ª–∏ TP, —á—Ç–æ –µ—Å–ª–∏ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è\n\n"
        
        "–£–†–û–í–ù–ò –°–ò–õ–´ –°–ò–ì–ù–ê–õ–ê (–æ–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç–æ):\n"
        "üî• 9-10 –±–∞–ª–ª–æ–≤: –û–ß–ï–ù–¨ –°–ò–õ–¨–ù–û - –ø–æ—á—Ç–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –º–æ–∂–Ω–æ —Ä–∏—Å–∫–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ\n"
        "‚ö° 7-8 –±–∞–ª–ª–æ–≤: –°–ò–õ–¨–ù–û - —Ö–æ—Ä–æ—à–∏–µ —à–∞–Ω—Å—ã –Ω–∞ —É—Å–ø–µ—Ö, –æ–±—ã—á–Ω—ã–π —Ä–∏—Å–∫\n"
        "üí´ 5-6 –±–∞–ª–ª–æ–≤: –°–†–ï–î–ù–ï - 50/50 —à–∞–Ω—Å—ã, –Ω–æ –ø—Ä–∏–±—ã–ª—å –ø–æ–∫—Ä–æ–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏\n"
        "‚ùå 1-4 –±–∞–ª–ª–∞: –°–õ–ê–ë–û - –±–æ–ª—å—à–∏–µ —à–∞–Ω—Å—ã –ø–æ—Ç–µ—Ä—è—Ç—å –¥–µ–Ω—å–≥–∏, –ª—É—á—à–µ –Ω–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å\n\n"
        
        "–ö–†–ò–¢–ï–†–ò–ò –î–õ–Ø –†–ê–ó–ù–´–• –°–ò–ì–ù–ê–õ–û–í:\n"
        "üìà BUY ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:\n"
        "‚Ä¢ –ß–µ—Ç–∫–∏–π –ø—Ä–æ–±–æ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è —Å –æ–±—ä–µ–º–æ–º –ò–õ–ò\n"
        "‚Ä¢ –û—Ç—Å–∫–æ–∫ –æ—Ç —Å–∏–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ò–õ–ò\n"
        "‚Ä¢ –ò–º–ø—É–ª—å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–≤–µ—Ä—Ö + –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ò–õ–ò\n"
        "‚Ä¢ –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è –Ω–∞ oversold + –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä\n\n"
        
        "üìâ SELL ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:\n"
        "‚Ä¢ –ß–µ—Ç–∫–∏–π –ø—Ä–æ–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å –æ–±—ä–µ–º–æ–º –ò–õ–ò\n"
        "‚Ä¢ –û—Ç–±–æ–π –æ—Ç —Å–∏–ª—å–Ω–æ–≥–æ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ò–õ–ò\n"
        "‚Ä¢ –ò–º–ø—É–ª—å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–Ω–∏–∑ + –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ò–õ–ò\n"
        "‚Ä¢ –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è –Ω–∞ overbought + –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä\n\n"
        
        "‚è∏Ô∏è NO TRADE ‚Äî –µ—Å–ª–∏:\n"
        "‚Ä¢ –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–µ–∑ —á–µ—Ç–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π\n"
        "‚Ä¢ –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤\n"
        "‚Ä¢ –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤\n"
        "‚Ä¢ Risk/Reward —Ö—É–∂–µ —á–µ–º 1:2\n\n"
        
        "–°–¢–†–û–ì–û –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:\n\n"
        "1. –°–∏–≥–Ω–∞–ª: Buy/Sell/No Trade\n"
        "2. –ü—Ä–∏—á–∏–Ω–∞: [–ö–†–ê–¢–ö–û–ï –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ, –º–∞–∫—Å–∏–º—É–º 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, ‚â§400 —Å–∏–º–≤–æ–ª–æ–≤]\n"
        "3. Stop Loss (SL): [—Ç–æ—á–Ω–∞—è —Ü–µ–Ω–∞ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º]\n"
        "4. Take Profit (TP): [—Ç–æ—á–Ω–∞—è —Ü–µ–Ω–∞ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º]\n"
        "5. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: [–ü–û–ù–Ø–¢–ù–û–ï –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ: —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ 10, —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å, —á—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏]\n\n"
        
        "–ü–†–ò–ú–ï–†–´ –ü–û–ù–Ø–¢–ù–´–• –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í:\n"
        "‚Ä¢ –°–∏–ª–∞ 9/10 - –æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª. –†–∏—Å–∫ $1, –ø—Ä–∏–±—ã–ª—å $3. –í—Å–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ä–æ—Å—Ç\n"
        "‚Ä¢ –°–∏–ª–∞ 6/10 - —Å—Ä–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª. –†–∏—Å–∫ $1, –ø—Ä–∏–±—ã–ª—å $2. –ï—Å—Ç—å —à–∞–Ω—Å—ã, –Ω–æ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—è\n"
        "‚Ä¢ –°–∏–ª–∞ 3/10 - —Å–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª. –†–∏—Å–∫ $1, –ø—Ä–∏–±—ã–ª—å $1.5. –õ—É—á—à–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å\n\n"
        
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≥—Ä–∞—Ñ–∏–∫ –∫–∞–∫ –õ–£–ß–®–ò–ô —Ç—Ä–µ–π–¥–µ—Ä –º–∏—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π –í–°–Æ —Å–≤–æ—é —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É.\n\n"
        "‚ö†Ô∏è –í–ê–ñ–ù–û: –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ö–†–ê–¢–ö–ò–ú! –ê–Ω–∞–ª–∏–∑ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 400 —Å–∏–º–≤–æ–ª–æ–≤. –¢–æ–ª—å–∫–æ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ!"
    )
    
    raw = _call_google(image_bytes, question, GOOGLE_MODEL)
    return [(f"google/{GOOGLE_MODEL}", raw)]

def parse_trading_signal(text: str) -> tuple[str, str, str, str, str, str]:
    # –ò—â–µ–º —Å–∏–≥–Ω–∞–ª
    signal_patterns = [
        r"^\s*1\.\s*–°–∏–≥–Ω–∞–ª:\s*(Buy|Sell|No Trade)\b",
        r"^\s*1\.\s*\*\*–°–∏–≥–Ω–∞–ª:\*\*\s*(Buy|Sell|No Trade)\b",
        r"–°–∏–≥–Ω–∞–ª:\s*(Buy|Sell|No Trade)\b",
        r"\*\*–°–∏–≥–Ω–∞–ª:\*\*\s*(Buy|Sell|No Trade)\b"
    ]
    
    signal = "NO_TRADE"
    for pattern in signal_patterns:
        m_sig = re.search(pattern, text, flags=re.IGNORECASE | re.MULTILINE)
        if m_sig:
            signal = m_sig.group(1).upper()
            break
    
    # –ò—â–µ–º –ø—Ä–∏—á–∏–Ω—É
    reason_patterns = [
        r"^\s*2\.\s*–ü—Ä–∏—á–∏–Ω–∞:\s*(.*?)(?=\n\s*[3-5]\.|$)",
        r"^\s*2\.\s*\*\*–ü—Ä–∏—á–∏–Ω–∞:\*\*\s*(.*?)(?=\n\s*[3-5]\.|$)",
        r"–ü—Ä–∏—á–∏–Ω–∞:\s*(.*?)(?=\n\s*[3-5]\.|$)",
        r"\*\*–ü—Ä–∏—á–∏–Ω–∞:\*\*\s*(.*?)(?=\n\s*[3-5]\.|$)"
    ]
    
    reason = ""
    for pattern in reason_patterns:
        m_rea = re.search(pattern, text, flags=re.IGNORECASE | re.MULTILINE | re.DOTALL)
        if m_rea:
            reason = m_rea.group(1).strip()
            break
    
    # –ò—â–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
    sl_patterns = [
        r"^\s*3\.\s*Stop Loss \(SL\):\s*(.*?)(?=\n\s*[4-5]\.|$)",
        r"Stop Loss \(SL\):\s*(.*?)(?=\n\s*[4-5]\.|$)",
        r"Stop Loss:\s*(.*?)(?=\n\s*[4-5]\.|$)",
        r"SL:\s*(.*?)(?=\n\s*[4-5]\.|$)"
    ]
    
    stop_loss = "-"
    for pattern in sl_patterns:
        m_sl = re.search(pattern, text, flags=re.IGNORECASE | re.MULTILINE | re.DOTALL)
        if m_sl:
            stop_loss = m_sl.group(1).strip()
            break
    
    # –ò—â–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
    tp_patterns = [
        r"^\s*4\.\s*Take Profit \(TP\):\s*(.*?)(?=\n\s*5\.|$)",
        r"Take Profit \(TP\):\s*(.*?)(?=\n\s*5\.|$)",
        r"Take Profit:\s*(.*?)(?=\n\s*5\.|$)",
        r"TP:\s*(.*?)(?=\n\s*5\.|$)"
    ]
    
    take_profit = "-"
    for pattern in tp_patterns:
        m_tp = re.search(pattern, text, flags=re.IGNORECASE | re.MULTILINE | re.DOTALL)
        if m_tp:
            take_profit = m_tp.group(1).strip()
            break
    
    # –ò—â–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    comm_patterns = [
        r"^\s*5\.\s*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\s*(.*?)$",
        r"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\s*(.*?)$",
        r"\*\*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\*\*\s*(.*?)$"
    ]
    
    comment = ""
    for pattern in comm_patterns:
        m_comm = re.search(pattern, text, flags=re.IGNORECASE | re.MULTILINE | re.DOTALL)
        if m_comm:
            comment = m_comm.group(1).strip()
            break
    
    # –ï—Å–ª–∏ –ø—Ä–∏—á–∏–Ω–∞ –ø—É—Å—Ç–∞—è, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
    if not reason:
        lines = text.splitlines()
        for line in lines:
            line = line.strip()
            if line and not re.match(r"^\s*[1-5]\.\s*(–°–∏–≥–Ω–∞–ª|–ü—Ä–∏—á–∏–Ω–∞|Stop Loss|Take Profit|–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π):\s*", line, flags=re.IGNORECASE):
                if not re.match(r"^\s*\*\*.*\*\*:\s*", line):
                    reason = line
                    break
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–æ–ª–±—ç–∫ - –≤–µ—Å—å —Ç–µ–∫—Å—Ç
    if not reason:
        reason = text.strip()
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ —Ä–∞–∑–Ω—ã–µ
    full_reason = reason
    if comment and comment != reason and comment not in reason:
        full_reason = f"{reason} | {comment}"
    
    return "TRADING", signal, "-", stop_loss, take_profit, full_reason[:300]

def extract_strength(text: str) -> str | None:
    """–í—ã—Ç–∞—â–∏—Ç—å —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞ –≤–∏–¥–∞ '–°–∏–ª–∞ 8/10' –∏–ª–∏ 'Strength 8/10' –∏–∑ —Ç–µ–∫—Å—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ '8/10' –∏–ª–∏ None."""
    try:
        if not text:
            return None
        m = re.search(r"(?:–°–∏–ª–∞|Strength)\s*([0-9]{1,2})\s*/\s*10", text, re.IGNORECASE)
        if m:
            return f"{m.group(1)}/10"
    except Exception as e:
        print(f"[parse-strength] regex failed: {e}")
    return None

def clean_field(value: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏, —Ç–æ–ª—å–∫–æ —Ç—Ä–∏–º–º–∏–Ω–≥."""
    try:
        if value is None:
            return "-"
        return str(value).strip()
    except Exception:
        return str(value)

async def get_bybit_klines(symbol: str, interval: str = "1", limit: int = 200):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π —Å Bybit"""
    try:
        url = "https://api.bybit.com/v5/market/kline"
        params = {
            "category": "linear",
            "symbol": symbol,
            "interval": interval,
            "limit": limit
        }
        response = requests.get(url, params=params, timeout=10)
        data = response.json()
        
        if data.get("retCode") == 0 and data.get("result", {}).get("list"):
            klines = data["result"]["list"]
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
            df_data = []
            for kline in reversed(klines):  # Bybit –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                df_data.append({
                    'timestamp': int(kline[0]),
                    'open': float(kline[1]),
                    'high': float(kline[2]),
                    'low': float(kline[3]),
                    'close': float(kline[4]),
                    'volume': float(kline[5])
                })
            
            df = pd.DataFrame(df_data)
            df['datetime'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('datetime', inplace=True)
            return df[['open', 'high', 'low', 'close', 'volume']]
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Bybit: {e}")
        return None

async def create_chart_image(df: pd.DataFrame, symbol: str, title: str = None) -> bytes:
    """–°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        if df is None or df.empty:
            return None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª—è
        mc = mpf.make_marketcolors(
            up='#00ff88', down='#ff4444',
            edge='inherit',
            wick={'up':'#00ff88', 'down':'#ff4444'},
            volume='in'
        )
        
        style = mpf.make_mpf_style(
            marketcolors=mc,
            gridstyle='-',
            gridcolor='#333333',
            facecolor='#1e1e1e',
            figcolor='#1e1e1e'
        )
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        fig, axes = mpf.plot(
            df,
            type='candle',
            style=style,
            volume=True,
            title=title or f'{symbol} Chart',
            ylabel='Price ($)',
            ylabel_lower='Volume',
            figsize=(12, 8),
            returnfig=True,
            tight_layout=True
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
        buf = io.BytesIO()
        fig.savefig(buf, format='png', dpi=150, bbox_inches='tight')
        buf.seek(0)
        image_bytes = buf.getvalue()
        buf.close()
        plt.close(fig)
        
        return image_bytes
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        return None

async def auto_analysis_handler():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    global auto_analysis_active, auto_analysis_chat_id, auto_analysis_symbols, last_signals
    
    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∞–Ω–∞–ª–∏–∑–æ–º (—á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç)
    await asyncio.sleep(5)
    
    while auto_analysis_active:
        try:
            for symbol in auto_analysis_symbols:
                if not auto_analysis_active:
                    break
                
                print(f"üìä –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ {symbol}...")
                
                # –û—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –Ω–∞—á–∞–ª—Å—è –∞–Ω–∞–ª–∏–∑
                print(f"üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –¥–ª—è {symbol}...")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å Bybit
                df = await get_bybit_klines(symbol, auto_analysis_timeframe, 200)
                
                if df is None or df.empty:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Bybit –¥–ª—è {symbol}")
                    continue
                
                print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è {symbol}: {len(df)} —Å–≤–µ—á–µ–π")
                
                # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                chart_bytes = await create_chart_image(df, symbol, f"{symbol} - {auto_analysis_timeframe}m (–ê–≤—Ç–æ)")
                
                if chart_bytes:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
                    print(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –∞–Ω–∞–ª–∏–∑ AI...")
                    model_results = analyze_chart(chart_bytes)
                    print(f"üéØ AI –≤–µ—Ä–Ω—É–ª {len(model_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    
                    for model_name, raw in model_results:
                        if raw.startswith("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:"):
                            continue
                        
                        print(f"üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç AI: {raw[:200]}...")
                        strategy, signal, entry, stop_loss, take_profit, reason = parse_trading_signal(raw)
                        print(f"üéØ –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {signal}, SL: {stop_loss}, TP: {take_profit}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å–∏–≥–Ω–∞–ª —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–∞
                        last_signal = last_signals.get(symbol, {})
                        current_signal_data = {
                            'signal': signal,
                            'stop_loss': stop_loss,
                            'take_profit': take_profit,
                            'reason': reason[:100]  # –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        }
                        
                        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï —Å–∏–≥–Ω–∞–ª—ã (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
                        # –¢—Ä–µ–π–¥–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –≤–∏–¥–µ—Ç—å –∫–∞–∂–¥–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ!
                        signal_should_send = True
                        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –í–°–ï —Å–∏–≥–Ω–∞–ª—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
                        
                        if signal in ['BUY', 'SELL'] and signal_should_send:
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª
                            last_signals[symbol] = current_signal_data
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
                            try:
                                chart_file = types.BufferedInputFile(chart_bytes, filename=f"{symbol}_auto_{auto_analysis_timeframe}m.png")
                                await send_with_retry(lambda: bot.send_photo(
                                    auto_analysis_chat_id,
                                    chart_file,
                                    caption=f"ü§ñ –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ {symbol} ({auto_analysis_timeframe}m)"
                                ))
                            except Exception as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
                            reason = (reason or "").strip()
                            
                            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–±—Ä–µ–∑–∞–Ω–∏—è
                            max_reason_length = 500  # –£–º–µ–Ω—å—à–∞–µ–º –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤
                            if len(reason) > max_reason_length:
                                reason = reason[:max_reason_length] + "..."
                            
                            # –ß–∏—Å—Ç–∏–º —Ä–∞–∑–º–µ—Ç–∫—É –∏–∑ –ø—Ä–∏—á–∏–Ω/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                            clean_reason = clean_field(reason)
                            if " | " in clean_reason:
                                reason_part, comment_part = clean_reason.split(" | ", 1)
                                analysis_text = f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason_part}\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment_part}"
                            else:
                                analysis_text = f"üìù –ê–Ω–∞–ª–∏–∑: {clean_reason}"
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞ (–≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∂–∏—Ä–Ω—ã–º)
                            signal_emoji = "üü¢üìà" if signal == "BUY" else "üî¥üìâ"
                            strength = extract_strength(reason) or extract_strength(comment)
                            if strength:
                                signal_text = f"{signal_emoji} –ê–í–¢–û–°–ò–ì–ù–ê–õ <b>{signal} ¬∑ –°–∏–ª–∞ {strength}</b>"
                            else:
                                signal_text = f"{signal_emoji} –ê–í–¢–û–°–ò–ì–ù–ê–õ <b>{signal}</b>"
                            
                            # –û—á–∏—â–∞–µ–º –ø–æ–ª—è –æ—Ç –ª–∏—à–Ω–µ–π markdown-—Ä–∞–∑–º–µ—Ç–∫–∏
                            stop_clean = clean_field(stop_loss)
                            take_clean = clean_field(take_profit)
                            
                            message_text = (
                                f"{signal_text}\n"
                                f"üí∞ –ü–∞—Ä–∞: {symbol}\n"
                                f"üõë –°—Ç–æ–ø: <b>{stop_clean}</b>\n"
                                f"üéØ –¢–µ–π–∫: <b>{take_clean}</b>\n"
                                f"{analysis_text}\n"
                                f"üïê {datetime.now().strftime('%H:%M:%S')}"
                            )
                            
                            try:
                                await send_with_retry(lambda: bot.send_message(auto_analysis_chat_id, message_text))
                                print(f"‚úÖ {signal} —Å–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {symbol}: {stop_loss} -> {take_profit}")
                            except Exception as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {signal} —Å–∏–≥–Ω–∞–ª–∞: {e}")
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                                last_signals[symbol] = current_signal_data
                            
                        elif signal == 'NO_TRADE':
                            # NO_TRADE –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
                            last_signals[symbol] = current_signal_data
                            print(f"üîç NO_TRADE —Å–∏–≥–Ω–∞–ª (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º) –¥–ª—è {symbol}: {reason[:50]}...")
                        
                        break  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
                        
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
                await asyncio.sleep(5)
                
        except Exception as e:
            if auto_analysis_active:
                print(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞: {e}")
                try:
                    await bot.send_message(auto_analysis_chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞: {e}")
                except Exception as notify_err:
                    print(f"[auto-analysis] failed to notify error: {notify_err}")
        
        if auto_analysis_active:
            print(f"‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ {auto_analysis_interval} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
            await asyncio.sleep(auto_analysis_interval)

async def start_auto_analysis(chat_id: int):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    global auto_analysis_active, auto_analysis_chat_id
    
    if auto_analysis_active:
        return False
    
    auto_analysis_active = True
    auto_analysis_chat_id = chat_id
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ —Ñ–æ–Ω–µ (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)
    asyncio.create_task(auto_analysis_handler())
    return True

async def stop_auto_analysis():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"""
    global auto_analysis_active
    auto_analysis_active = False

def get_control_keyboard():
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –≤–Ω–∏–∑—É)"""
    global auto_analysis_active
    
    if auto_analysis_active:
        # –ï—Å–ª–∏ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑")],
                [KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å")]
            ],
            resize_keyboard=True,
            persistent=True
        )
    else:
        # –ï—Å–ª–∏ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å—Ç–∏—Ç—å"
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑")],
                [KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å")]
            ],
            resize_keyboard=True,
            persistent=True
        )
    
    return keyboard

@dp.message(F.text == "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑")
async def message_start_analysis(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑'"""
    try:
        # –ë—ã—Å—Ç—Ä–æ –∑–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
        success = await start_auto_analysis(message.chat.id)
        
        if not success:
            await message.answer("‚ùå –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω!", reply_markup=get_control_keyboard())
            return
        
        # –ë—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        new_text = (
            "ü§ñ <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–æ–º</b>\n\n"
            f"‚úÖ –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω!\n"
            f"üìä –°–∏–º–≤–æ–ª: SOLUSDT\n"
            f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ 6 –º–∏–Ω—É—Ç\n"
            f"üìà –¢–∞–π–º—Ñ—Ä–µ–π–º: 5m –≥—Ä–∞—Ñ–∏–∫–∏\n"
            f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫: Bybit API\n\n"
            f"üí° –ü–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥..."
        )
        
        await message.answer(new_text, reply_markup=get_control_keyboard())
            
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞", reply_markup=get_control_keyboard())

@dp.message(F.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑")
async def message_stop_analysis(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑'"""
    global auto_analysis_active, auto_analysis_chat_id
    
    try:
        if auto_analysis_chat_id != message.chat.id:
            await message.answer("‚ùå –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º —á–∞—Ç–µ!")
            return
        
        await stop_auto_analysis()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        new_text = (
            "ü§ñ <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–æ–º</b>\n\n"
            f"‚èπÔ∏è –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
            f"üìä –°–∏–º–≤–æ–ª: SOLUSDT\n"
            f"‚è∞ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É"
        )
        
        await message.answer(new_text, reply_markup=get_control_keyboard())
            
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞")

@dp.message(F.text == "üìä –°—Ç–∞—Ç—É—Å")
async def message_show_status(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç—É—Å' ‚Äî —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç Health"""
    try:
        text = await build_health_text()
        await message.answer(text, reply_markup=get_control_keyboard())
    except Exception:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")

## Removed /stats in favor of Status button

@dp.message(Command("health"))
async def cmd_health(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤: Telegram, Bybit, Google, –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑"""
    text = await build_health_text()
    await message.answer(text)

@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    global auto_analysis_active
    
    if auto_analysis_active:
        status_text = (
            "ü§ñ <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–æ–º</b>\n\n"
            f"‚úÖ –°—Ç–∞—Ç—É—Å: <b>–ê–ö–¢–ò–í–ï–ù</b>\n"
            f"üìä –°–∏–º–≤–æ–ª: SOLUSDT\n"
            f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ 6 –º–∏–Ω—É—Ç\n"
            f"üìà –¢–∞–π–º—Ñ—Ä–µ–π–º: 5m –≥—Ä–∞—Ñ–∏–∫–∏\n"
            f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫: Bybit API\n\n"
            f"üí° –°–∏–≥–Ω–∞–ª—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö"
        )
    else:
        status_text = (
            "ü§ñ <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–æ–º</b>\n\n"
            f"‚èπÔ∏è –°—Ç–∞—Ç—É—Å: <b>–û–°–¢–ê–ù–û–í–õ–ï–ù</b>\n"
            f"üìä –°–∏–º–≤–æ–ª: SOLUSDT (Solana)\n"
            f"‚è∞ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É\n\n"
            f"üéØ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã!"
        )
    
    await message.answer(status_text, reply_markup=get_control_keyboard())

@dp.message(F.photo)
async def handle_photo(message: types.Message):
    """–ê–Ω–∞–ª–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ñ–æ—Ç–æ –≥—Ä–∞—Ñ–∏–∫–∞"""
    await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫‚Ä¶ ‚è≥")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    img_bytes = await bot.download_file(file.file_path)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
    model_results = analyze_chart(img_bytes.read())
    
    lines = []
    for model_name, raw in model_results:
        if raw.startswith("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:"):
            block = f"üß† {model_name}: {raw}"
        else:
            strategy, signal, entry, stop_loss, take_profit, reason = parse_trading_signal(raw)
            reason = (reason or "").strip()
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å " | "
            if " | " in reason:
                reason_part, comment_part = reason.split(" | ", 1)
                analysis_text = f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason_part}\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment_part}"
            else:
                analysis_text = f"üìù –ê–Ω–∞–ª–∏–∑: {reason}"
            
            block = f"üéØ –°–∏–≥–Ω–∞–ª: {signal}\nüõë –°—Ç–æ–ø: {stop_loss}\nüéØ –¢–µ–π–∫: {take_profit}\n{analysis_text}"
        
        lines.append(block)

    reply = "\n\n".join(lines) if lines else "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"

    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(reply) <= 4000:
        await message.answer(reply)
    else:
        chunks = []
        start = 0
        while start < len(reply):
            end = start + 4000
            if end >= len(reply):
                chunks.append(reply[start:])
                break
            
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
            cut = reply.rfind('\n', start, end)
            if cut == -1:
                cut = end
            
            chunks.append(reply[start:cut])
            start = cut
        
        for chunk in chunks:
            if chunk.strip():
                await message.answer(chunk.strip())

if __name__ == "__main__":
    import asyncio

    async def main():
        # –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤–µ–±—Ö—É–∫, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å getUpdates (long polling)
        try:
            await bot.delete_webhook(drop_pending_updates=True)
        except Exception as e:
            print(f"[startup] delete_webhook failed: {e}")
        
        try:
            await dp.start_polling(bot)
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            await stop_auto_analysis()

    asyncio.run(main())
